#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.11 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 57 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 10 #"Monospace\0"
0 16 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1
          0 1779 0 17 3 25 #";; PL Project - Fall 2017"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";; NUMEX interpreter"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 28 3 12 #"#lang racket"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 2 #" ("
0 0 14 3 15 #"all-defined-out"
0 0 24 3 3 #")) "
0 0 17 3 39 #";; so we can put tests in a second file"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";; definition of structures for NUMEX programs"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";; Add the missing ones"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 3 #"  ("
0 0 14 3 1 #"s"
0 0 24 3 21 #")                    "
0 0 23 3 13 #"#:transparent"
0 0 24 3 3 #")  "
0 0 17 3 11 #";; variable"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 3 #"int"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"num"
0 0 24 3 19 #")                  "
0 0 23 3 13 #"#:transparent"
0 0 24 3 3 #")  "
0 0 17 3 36 #";; a constant number, e.g., (int 17)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 3 #"add"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 17 #")                "
0 0 23 3 13 #"#:transparent"
0 0 24 3 3 #")  "
0 0 17 3 22 #";; add two expressions"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 4 #"mult"
0 0 24 3 2 #" ("
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 17 #")                "
0 0 23 3 13 #"#:transparent"
0 0 24 3 3 #")  "
0 0 17 3 27 #";; multiply two expressions"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 3 #"neg"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"e1"
0 0 24 3 20 #")                   "
0 0 23 3 13 #"#:transparent"
0 0 24 3 3 #")  "
0 0 17 3 12 #";; negate an"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 3 #"fun"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"nameopt"
0 0 24 3 1 #" "
0 0 14 3 6 #"formal"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 3 #")  "
0 0 23 3 13 #"#:transparent"
0 0 24 3 3 #")  "
0 0 17 3 37 #";; a recursive(?) 1-argument function"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 7 #"islthan"
0 0 24 3 2 #" ("
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 14 #")             "
0 0 23 3 13 #"#:transparent"
0 0 24 3 3 #")  "
0 0 17 3 26 #";; compare two expressions"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 6 #"ifzero"
0 0 24 3 2 #" ("
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 1 #" "
0 0 14 3 2 #"e3"
0 0 24 3 12 #")           "
0 0 23 3 13 #"#:transparent"
0 0 24 3 3 #")  "
0 0 17 3 73
(
 #";; decide on e1 if it is zero then e2 evaluates else e3 will be eval"
 #"uated"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 7 #"ifgthan"
0 0 24 3 2 #" ("
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 1 #" "
0 0 14 3 2 #"e3"
0 0 24 3 1 #" "
0 0 14 3 2 #"e4"
0 0 24 3 8 #")       "
0 0 23 3 13 #"#:transparent"
0 0 24 3 3 #")  "
0 0 17 3 71
(
 #";; result is e3 if is e1 strictly greater than e2 else the result is"
 #" e4"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 4 #"call"
0 0 24 3 2 #" ("
0 0 14 3 6 #"funexp"
0 0 24 3 1 #" "
0 0 14 3 6 #"actual"
0 0 24 3 9 #")        "
0 0 23 3 13 #"#:transparent"
0 0 24 3 3 #")  "
0 0 17 3 16 #";; function call"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 4 #"mlet"
0 0 24 3 2 #" ("
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 15 #")              "
0 0 23 3 13 #"#:transparent"
0 0 24 3 3 #")  "
0 0 17 3 34 #";; value of s is bound to e1 in e2"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 5 #"apair"
0 0 24 3 2 #" ("
0 0 14 3 2 #"e1"
0 0 24 3 1 #" "
0 0 14 3 2 #"e2"
0 0 24 3 16 #")               "
0 0 23 3 13 #"#:transparent"
0 0 24 3 3 #")  "
0 0 17 3 19 #";; pair constructor"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 2 #"e1"
0 0 24 3 19 #")                  "
0 0 23 3 13 #"#:transparent"
0 0 24 3 3 #")  "
0 0 17 3 21 #";; first part of pair"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 6 #"second"
0 0 24 3 2 #" ("
0 0 14 3 2 #"e1"
0 0 24 3 18 #")                 "
0 0 23 3 13 #"#:transparent"
0 0 24 3 3 #")  "
0 0 17 3 22 #";; second part of pair"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 5 #"munit"
0 0 24 3 23 #"   ()                  "
0 0 23 3 13 #"#:transparent"
0 0 24 3 3 #")  "
0 0 17 3 39 #";; unit value -- good for ending a list"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 7 #"ismunit"
0 0 24 3 2 #" ("
0 0 14 3 1 #"e"
0 0 24 3 18 #")                 "
0 0 23 3 13 #"#:transparent"
0 0 24 3 3 #")  "
0 0 17 3 30 #";; if e1 is unit then 1 else 0"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 7 #"closure"
0 0 24 3 2 #" ("
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 3 #"fun"
0 0 24 3 12 #")           "
0 0 23 3 13 #"#:transparent"
0 0 24 3 3 #")  "
0 0 17 3 74
(
 #";; a closure is not in \"source\" programs; it is what functions eva"
 #"luate to"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";; Problem 1"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 21 #"racketlist->numexlist"
0 0 24 3 1 #" "
0 0 14 3 2 #"xs"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  [("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 2 #"xs"
0 0 24 3 5 #")) ( "
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 41 #"\"Can't convert non list racket type to a "
0 0 29 3 5 #"NUMEX"
0 0 19 3 6 #" list\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  [("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 2 #"xs"
0 0 24 3 3 #") ("
0 0 14 3 5 #"munit"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  [("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 8 #"integer?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 2 #"xs"
0 0 24 3 5 #"))) ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"Can't "
0 0 19 3 32 #"convert a non integer type to a "
0 0 29 3 5 #"NUMEX"
0 0 19 3 6 #" list "
0 0 19 3 7 #"member\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 21 3 2 #"#t"
0 0 24 3 2 #" ("
0 0 14 3 5 #"apair"
0 0 24 3 2 #" ("
0 0 14 3 3 #"int"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 2 #"xs"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"racketlist"
0 0 14 3 11 #"->numexlist"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 2 #"xs"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 34 #";;Part 2 of problem 1 is postponed"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"numexlist"
0 0 14 3 12 #"->racketlist"
0 0 24 3 1 #" "
0 0 14 3 2 #"xs"
0 0 24 3 2 #") "
0 0 14 3 2 #"xs"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";; Problem 2"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";; lookup a variable in an environment"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";; Complete this function"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"envlookup"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 7 #"string?"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 3 #"Can"
0 0 19 3 1 #"'"
0 0 19 3 1 #"t"
0 0 19 3 1 #" "
0 0 19 3 6 #"search"
0 0 19 3 1 #" "
0 0 19 3 2 #"on"
0 0 19 3 1 #" "
0 0 19 3 11 #"environment"
0 0 19 3 1 #" "
0 0 19 3 4 #"with"
0 0 19 3 1 #" "
0 0 19 3 1 #"a"
0 0 19 3 1 #" "
0 0 19 3 3 #"non"
0 0 19 3 1 #" "
0 0 19 3 6 #"string"
0 0 19 3 5 #" name"
0 0 19 3 1 #"\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #") ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 7 #"Unbound"
0 0 19 3 1 #" "
0 0 19 3 8 #"variable"
0 0 19 3 1 #" "
0 0 19 3 6 #"during"
0 0 19 3 11 #" evaluation"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 3 #"not"
0 0 24 3 1 #"("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 11 #"Environment"
0 0 19 3 1 #" "
0 0 19 3 2 #"is"
0 0 19 3 1 #" "
0 0 19 3 3 #"not"
0 0 19 3 1 #" "
0 0 19 3 1 #"a"
0 0 19 3 5 #" list"
0 0 19 3 1 #"\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 3 #"not"
0 0 24 3 1 #"("
0 0 14 3 5 #"pair?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 5 #"))) ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 11 #"Environment"
0 0 19 3 1 #" "
0 0 19 3 4 #"list"
0 0 19 3 1 #" "
0 0 19 3 6 #"member"
0 0 19 3 1 #" "
0 0 19 3 2 #"is"
0 0 19 3 1 #" "
0 0 19 3 3 #"not"
0 0 19 3 1 #" "
0 0 19 3 1 #"a"
0 0 19 3 5 #" pair"
0 0 19 3 1 #"\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")) "
0 0 14 3 3 #"str"
0 0 24 3 3 #") ("
0 0 14 3 3 #"int"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 21 3 2 #"#t"
0 0 24 3 2 #" ("
0 0 14 3 9 #"envlookup"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #") "
0 0 14 3 3 #"str"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";;change environment add or modify variable with name "
0 0 17 3 13 #"str to value "
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"envChanger"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 15 3 4 #"cond"
0 0 24 3 2 #"[("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 7 #"string?"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 3 #"Can"
0 0 19 3 1 #"'"
0 0 19 3 1 #"t"
0 0 19 3 1 #" "
0 0 19 3 6 #"create"
0 0 19 3 1 #" "
0 0 19 3 9 #"temporary"
0 0 19 3 2 #"  "
0 0 19 3 11 #"environment"
0 0 19 3 1 #" "
0 0 19 3 4 #"with"
0 0 19 3 1 #" "
0 0 19 3 1 #"a"
0 0 19 3 1 #" "
0 0 19 3 3 #"non"
0 0 19 3 1 #" "
0 0 19 3 6 #"string"
0 0 19 3 5 #" name"
0 0 19 3 1 #"\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 3 #"not"
0 0 24 3 1 #"("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"Input"
0 0 19 3 1 #" "
0 0 19 3 11 #"environment"
0 0 19 3 1 #" "
0 0 19 3 2 #"is"
0 0 19 3 1 #" "
0 0 19 3 3 #"not"
0 0 19 3 1 #" "
0 0 19 3 1 #"a"
0 0 19 3 5 #" list"
0 0 19 3 1 #"\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 2 #") "
0 0 14 3 4 #"null"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 3 #"not"
0 0 24 3 1 #"("
0 0 14 3 5 #"pair?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 5 #"))) ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"Input"
0 0 19 3 1 #" "
0 0 19 3 11 #"environment"
0 0 19 3 1 #" "
0 0 19 3 4 #"list"
0 0 19 3 1 #" "
0 0 19 3 6 #"member"
0 0 19 3 1 #" "
0 0 19 3 2 #"is"
0 0 19 3 1 #" "
0 0 19 3 3 #"not"
0 0 19 3 1 #" "
0 0 19 3 1 #"a"
0 0 19 3 5 #" pair"
0 0 19 3 1 #"\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")) "
0 0 14 3 3 #"str"
0 0 24 3 3 #") ("
0 0 14 3 10 #"envChanger"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #") "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 21 3 2 #"#t"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #")("
0 0 14 3 10 #"envChanger"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #") "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";; Do NOT change the two cases given to you."
0 0 24 29 1 #"\n"
0 0 17 3 40 #";; DO add more cases for other kinds of "
0 0 17 3 18 #"NUMEX expressions."
0 0 24 29 1 #"\n"
0 0 17 3 16 #";; We will test "
0 0 17 3 4 #"eval"
0 0 17 3 7 #"-under-"
0 0 17 3 38 #"env by calling it directly even though"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";; \""
0 0 17 3 2 #"in"
0 0 17 3 1 #" "
0 0 17 3 4 #"real"
0 0 17 3 1 #" "
0 0 17 3 4 #"life"
0 0 17 3 35 #"\" it would be a helper function of "
0 0 17 3 9 #"eval-exp."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 14 3 10 #"-under-env"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 4 #"var?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #")("
0 0 14 3 9 #"envlookup"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #" ("
0 0 14 3 5 #"var-s"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 4 #"int?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #")("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 8 #"integer?"
0 0 24 3 2 #" ("
0 0 14 3 7 #"int-num"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 14 3 1 #"e"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 3 #"Can"
0 0 19 3 1 #"'"
0 0 19 3 1 #"t"
0 0 19 3 1 #" "
0 0 19 3 7 #"convert"
0 0 19 3 1 #" "
0 0 19 3 1 #"a"
0 0 19 3 1 #" "
0 0 19 3 6 #"Racket"
0 0 19 3 1 #" "
0 0 19 3 3 #"non"
0 0 19 3 1 #" "
0 0 19 3 7 #"integer"
0 0 19 3 1 #" "
0 0 19 3 2 #"to"
0 0 19 3 1 #" "
0 0 19 3 2 #"a "
0 0 29 3 5 #"NUMEX"
0 0 19 3 4 #" int"
0 0 19 3 1 #"\""
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 4 #"add?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 2 #"v1"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 14 3 10 #"-under-env"
0 0 24 3 2 #" ("
0 0 14 3 6 #"add-e1"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ["
0 0 14 3 2 #"v2"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 14 3 10 #"-under-env"
0 0 24 3 2 #" ("
0 0 14 3 6 #"add-e2"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 4 #"int?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 4 #"int?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 3 #"int"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 7 #"int-num"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 7 #"int-num"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 29 3 5 #"NUMEX"
0 0 19 3 1 #" "
0 0 19 3 8 #"addition"
0 0 19 3 1 #" "
0 0 19 3 7 #"applied"
0 0 19 3 1 #" "
0 0 19 3 2 #"to"
0 0 19 3 11 #" non-number"
0 0 19 3 1 #"\""
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 5 #"mult?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 2 #"v1"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 14 3 10 #"-under-env"
0 0 24 3 2 #" ("
0 0 14 3 7 #"mult-e1"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ["
0 0 14 3 2 #"v2"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 14 3 10 #"-under-env"
0 0 24 3 2 #" ("
0 0 14 3 7 #"mult-e2"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 4 #"int?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 4 #"int?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 3 #"int"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 7 #"int-num"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 7 #"int-num"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 29 3 5 #"NUMEX"
0 0 19 3 1 #" "
0 0 19 3 14 #"multiplication"
0 0 19 3 1 #" "
0 0 19 3 7 #"applied"
0 0 19 3 1 #" "
0 0 19 3 2 #"to"
0 0 19 3 11 #" non-number"
0 0 19 3 1 #"\""
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 4 #"neg?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 1 #"v"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 14 3 10 #"-under-env"
0 0 24 3 2 #" ("
0 0 14 3 6 #"neg-e1"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 4 #"int?"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 3 #") ("
0 0 14 3 3 #"int"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 7 #"int-num"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 4 #"))) "
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 29 3 5 #"NUMEX"
0 0 19 3 1 #" "
0 0 19 3 8 #"negation"
0 0 19 3 1 #" "
0 0 19 3 2 #"on"
0 0 19 3 1 #" "
0 0 19 3 3 #"non"
0 0 19 3 1 #" "
0 0 19 3 7 #"integer"
0 0 19 3 11 #" expression"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 8 #"islthan?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 2 #"v1"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 14 3 10 #"-under-env"
0 0 24 3 2 #" ("
0 0 14 3 10 #"islthan-e1"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ["
0 0 14 3 2 #"v2"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 14 3 10 #"-under-env"
0 0 24 3 2 #" ("
0 0 14 3 10 #"islthan-e2"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 4 #"int?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 4 #"int?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 2 #"if"
0 0 24 3 1 #"("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 7 #"int-num"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 2 #")("
0 0 14 3 7 #"int-num"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 3 #"))("
0 0 14 3 3 #"int"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #")("
0 0 14 3 3 #"int"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 29 3 5 #"NUMEX"
0 0 19 3 1 #" "
0 0 29 3 7 #"islthan"
0 0 19 3 1 #" "
0 0 19 3 5 #"doesn"
0 0 19 3 1 #"'"
0 0 19 3 1 #"t"
0 0 19 3 1 #" "
0 0 19 3 4 #"work"
0 0 19 3 1 #" "
0 0 19 3 3 #"on "
0 0 29 3 5 #"gaurd"
0 0 19 3 1 #" "
0 0 19 3 4 #"with"
0 0 19 3 1 #" "
0 0 19 3 3 #"non"
0 0 19 3 1 #" "
0 0 19 3 7 #"integer"
0 0 19 3 7 #" values"
0 0 19 3 1 #"\""
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 7 #"ifzero?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 1 #"v"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 14 3 10 #"-under-env"
0 0 24 3 2 #" ("
0 0 14 3 9 #"ifzero-e1"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 4 #"int?"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 7 #"int-num"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 4 #" ) ("
0 0 14 3 4 #"eval"
0 0 14 3 10 #"-under-env"
0 0 24 3 2 #" ("
0 0 14 3 9 #"ifzero-e2"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 2 #")("
0 0 14 3 4 #"eval"
0 0 14 3 10 #"-under-env"
0 0 24 3 2 #" ("
0 0 14 3 9 #"ifzero-e3"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 29 3 5 #"NUMEX"
0 0 19 3 1 #" "
0 0 29 3 6 #"ifzero"
0 0 19 3 1 #" "
0 0 19 3 5 #"doesn"
0 0 19 3 1 #"'"
0 0 19 3 1 #"t"
0 0 19 3 1 #" "
0 0 19 3 4 #"work"
0 0 19 3 1 #" "
0 0 19 3 3 #"on "
0 0 29 3 5 #"gaurd"
0 0 19 3 1 #" "
0 0 19 3 4 #"with"
0 0 19 3 2 #"  "
0 0 19 3 3 #"non"
0 0 19 3 1 #" "
0 0 19 3 7 #"integer"
0 0 19 3 6 #" value"
0 0 19 3 1 #"\""
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 8 #"ifgthan?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 2 #"v1"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 14 3 10 #"-under-env"
0 0 24 3 2 #" ("
0 0 14 3 10 #"ifgthan-e1"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ["
0 0 14 3 2 #"v2"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 14 3 10 #"-under-env"
0 0 24 3 2 #" ("
0 0 14 3 10 #"ifgthan-e2"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 4 #"int?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 4 #"int?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 2 #"if"
0 0 24 3 1 #"("
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 7 #"int-num"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 2 #")("
0 0 14 3 7 #"int-num"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 3 #"))("
0 0 14 3 4 #"eval"
0 0 14 3 10 #"-under-env"
0 0 24 3 2 #" ("
0 0 14 3 10 #"ifgthan-e3"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 2 #")("
0 0 14 3 4 #"eval"
0 0 14 3 10 #"-under-env"
0 0 24 3 2 #" ("
0 0 14 3 10 #"ifgthan-e4"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 29 3 5 #"NUMEX"
0 0 19 3 1 #" "
0 0 29 3 7 #"isgthan"
0 0 19 3 1 #" "
0 0 19 3 5 #"doesn"
0 0 19 3 1 #"'"
0 0 19 3 1 #"t"
0 0 19 3 1 #" "
0 0 19 3 4 #"work"
0 0 19 3 1 #" "
0 0 19 3 3 #"on "
0 0 29 3 6 #"gaurds"
0 0 19 3 1 #" "
0 0 19 3 4 #"with"
0 0 19 3 1 #" "
0 0 19 3 3 #"non"
0 0 19 3 1 #" "
0 0 19 3 7 #"integer"
0 0 19 3 7 #" values"
0 0 19 3 1 #"\""
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 5 #"mlet?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 2 #"v1"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 14 3 10 #"-under-env"
0 0 24 3 2 #" ("
0 0 14 3 7 #"mlet-e1"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"             [("
0 0 14 3 3 #"not"
0 0 24 3 1 #"("
0 0 14 3 7 #"string?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"mlet-s"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 4 #")))("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 29 3 5 #"NUMEX"
0 0 19 3 1 #" "
0 0 29 3 4 #"mlet"
0 0 19 3 1 #" "
0 0 19 3 5 #"doesn"
0 0 19 3 1 #"'"
0 0 19 3 1 #"t"
0 0 19 3 1 #" "
0 0 19 3 4 #"work"
0 0 19 3 1 #" "
0 0 19 3 4 #"with"
0 0 19 3 1 #" "
0 0 19 3 3 #"non"
0 0 19 3 1 #" "
0 0 19 3 6 #"string"
0 0 19 3 6 #" names"
0 0 19 3 1 #"\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"             [("
0 0 14 3 3 #"not"
0 0 24 3 1 #"("
0 0 14 3 4 #"int?"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 29 3 5 #"NUMEX"
0 0 19 3 1 #" "
0 0 29 3 4 #"mlet"
0 0 19 3 1 #" "
0 0 19 3 5 #"doesn"
0 0 19 3 1 #"'"
0 0 19 3 1 #"t"
0 0 19 3 1 #" "
0 0 19 3 4 #"work"
0 0 19 3 1 #" "
0 0 19 3 4 #"with"
0 0 19 3 1 #" "
0 0 19 3 3 #"non"
0 0 19 3 1 #" "
0 0 19 3 3 #"int"
0 0 19 3 7 #" values"
0 0 19 3 1 #"\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ["
0 0 21 3 2 #"#t"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 14 3 10 #"-under-env"
0 0 24 3 2 #" ("
0 0 14 3 7 #"mlet-e2"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #") ("
0 0 14 3 10 #"envChanger"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #" ("
0 0 14 3 6 #"mlet-s"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #") ("
0 0 14 3 7 #"int-num"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"             ))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 6 #"apair?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 2 #"v1"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 14 3 10 #"-under-env"
0 0 24 3 2 #" ("
0 0 14 3 8 #"apair-e1"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ["
0 0 14 3 2 #"v2"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 14 3 10 #"-under-env"
0 0 24 3 2 #" ("
0 0 14 3 8 #"apair-e2"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 5 #"apair"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 6 #"first?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 1 #"v"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 14 3 10 #"-under-env"
0 0 24 3 2 #" ("
0 0 14 3 8 #"first-e1"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 2 #"if"
0 0 24 3 1 #"("
0 0 14 3 6 #"apair?"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 8 #"apair-e1"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 29 3 5 #"NUMEX"
0 0 19 3 1 #" "
0 0 19 3 3 #"Can"
0 0 19 3 1 #"'"
0 0 19 3 1 #"t"
0 0 19 3 1 #" "
0 0 19 3 3 #"get"
0 0 19 3 1 #" "
0 0 19 3 5 #"first"
0 0 19 3 1 #" "
0 0 19 3 7 #"element"
0 0 19 3 1 #" "
0 0 19 3 2 #"of"
0 0 19 3 1 #" "
0 0 19 3 4 #"non "
0 0 29 3 5 #"apair"
0 0 19 3 1 #"\""
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 7 #"second?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 1 #"v"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 14 3 10 #"-under-env"
0 0 24 3 2 #" ("
0 0 14 3 9 #"second-e1"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 2 #"if"
0 0 24 3 1 #"("
0 0 14 3 6 #"apair?"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 8 #"apair-e2"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 29 3 5 #"NUMEX"
0 0 19 3 1 #" "
0 0 19 3 3 #"Can"
0 0 19 3 1 #"'"
0 0 19 3 1 #"t"
0 0 19 3 1 #" "
0 0 19 3 3 #"get"
0 0 19 3 1 #" "
0 0 19 3 6 #"second"
0 0 19 3 1 #" "
0 0 19 3 7 #"element"
0 0 19 3 1 #" "
0 0 19 3 2 #"of"
0 0 19 3 1 #" "
0 0 19 3 4 #"non "
0 0 29 3 5 #"apair"
0 0 19 3 1 #"\""
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 6 #"munit?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 14 3 1 #"e"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 8 #"ismunit?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 1 #"v"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 14 3 10 #"-under-env"
0 0 24 3 2 #" ("
0 0 14 3 9 #"ismunit-e"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"munit?"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #")("
0 0 14 3 3 #"int"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #")("
0 0 14 3 3 #"int"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 17 3 29 #";; CHANGE add more cases here"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 21 3 2 #"#t"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 4 #"bad "
0 0 29 3 5 #"NUMEX"
0 0 19 3 1 #" "
0 0 19 3 11 #"expression:"
0 0 19 3 3 #" ~v"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";; Do NOT change"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"eval-exp"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"eval"
0 0 14 3 10 #"-under-env"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #" "
0 0 14 3 4 #"null"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"first\""
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"second\""
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #"))) "
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 12 #";; Problem 3"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 9 #"(define ("
0 0 17 3 7 #"ifmunit"
0 0 17 3 1 #" "
0 0 17 3 2 #"e1"
0 0 17 3 1 #" "
0 0 17 3 2 #"e2"
0 0 17 3 1 #" "
0 0 17 3 5 #"e3) \""
0 0 17 3 6 #"CHANGE"
0 0 17 3 2 #"\")"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 9 #"(define ("
0 0 17 3 4 #"mlet"
0 0 17 3 2 #"* "
0 0 17 3 2 #"bs"
0 0 17 3 1 #" "
0 0 17 3 5 #"e2) \""
0 0 17 3 6 #"CHANGE"
0 0 17 3 2 #"\")"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 9 #"(define ("
0 0 17 3 4 #"ifeq"
0 0 17 3 1 #" "
0 0 17 3 2 #"e1"
0 0 17 3 1 #" "
0 0 17 3 2 #"e2"
0 0 17 3 1 #" "
0 0 17 3 2 #"e3"
0 0 17 3 1 #" "
0 0 17 3 5 #"e4) \""
0 0 17 3 6 #"CHANGE"
0 0 17 3 2 #"\")"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 12 #";; Problem 4"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 8 #"(define "
0 0 17 3 5 #"numex"
0 0 17 3 6 #"-map \""
0 0 17 3 6 #"CHANGE"
0 0 17 3 2 #"\")"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 8 #"(define "
0 0 17 3 5 #"numex"
0 0 17 3 1 #"-"
0 0 17 3 7 #"mapAddN"
0 0 17 29 1 #"\n"
0 0 17 3 3 #"  ("
0 0 17 3 4 #"mlet"
0 0 17 3 2 #" \""
0 0 17 3 3 #"map"
0 0 17 3 2 #"\" "
0 0 17 3 5 #"numex"
0 0 17 3 4 #"-map"
0 0 17 29 1 #"\n"
0 0 17 3 9 #"        \""
0 0 17 3 6 #"CHANGE"
0 0 17 3 2 #" ("
0 0 17 3 6 #"notice"
0 0 17 3 1 #" "
0 0 17 3 3 #"map"
0 0 17 3 1 #" "
0 0 17 3 2 #"is"
0 0 17 3 1 #" "
0 0 17 3 3 #"now"
0 0 17 3 1 #" "
0 0 17 3 2 #"in"
0 0 17 3 1 #" "
0 0 17 3 5 #"NUMEX"
0 0 17 3 1 #" "
0 0 17 3 5 #"scope"
0 0 17 3 1 #")"
0 0 17 3 3 #"\"))"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 20 #";; Challenge Problem"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 1 #"("
0 0 17 3 6 #"struct"
0 0 17 3 16 #" fun-challenge ("
0 0 17 3 7 #"nameopt"
0 0 17 3 1 #" "
0 0 17 3 6 #"formal"
0 0 17 3 6 #" body "
0 0 17 3 8 #"freevars"
0 0 17 3 2 #") "
0 0 17 3 52 #"#:transparent) ;; a recursive(?) 1-argument function"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 53 #";; We will test this function directly, so it must do"
0 0 17 29 1 #"\n"
0 0 17 3 33 #";; as described in the assignment"
0 0 17 29 1 #"\n"
0 0 17 3 1 #"("
0 0 17 3 6 #"define"
0 0 17 3 2 #" ("
0 0 17 3 17 #"compute-free-vars"
0 0 17 3 1 #" "
0 0 17 3 4 #"e) \""
0 0 17 3 6 #"CHANGE"
0 0 17 3 2 #"\")"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 26 #";; Do NOT share code with "
0 0 17 3 4 #"eval"
0 0 17 3 7 #"-under-"
0 0 17 3 3 #"env"
0 0 17 3 31 #" because that will make grading"
0 0 17 29 1 #"\n"
0 0 17 3 79
(
 #";; more difficult, so copy most of your interpreter here and make mi"
 #"nor changes"
) 0 0 17 29 1 #"\n"
0 0 17 3 9 #"(define ("
0 0 17 3 4 #"eval"
0 0 17 3 7 #"-under-"
0 0 17 3 3 #"env"
0 0 17 3 2 #"-c"
0 0 17 3 3 #" e "
0 0 17 3 3 #"env"
0 0 17 3 3 #") \""
0 0 17 3 6 #"CHANGE"
0 0 17 3 1 #"\""
0 0 17 3 1 #")"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 21 #";; Do NOT change this"
0 0 17 29 1 #"\n"
0 0 17 3 1 #"("
0 0 17 3 6 #"define"
0 0 17 3 2 #" ("
0 0 17 3 10 #"eval-exp-c"
0 0 17 3 1 #" "
0 0 17 3 1 #"e"
0 0 17 3 1 #")"
0 0 17 29 1 #"\n"
0 0 17 3 3 #"  ("
0 0 17 3 16 #"eval-under-env-c"
0 0 17 3 2 #" ("
0 0 17 3 17 #"compute-free-vars"
0 0 17 3 1 #" "
0 0 17 3 1 #"e"
0 0 17 3 2 #") "
0 0 17 3 4 #"null"
0 0 17 3 2 #"))"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0           0
